name: Deploy to AWS Dev

on:
  workflow_call:
    inputs:
      aws_region:
        required: true
        type: string
        default: us-east-1
      ecr_repository_name:
        required: true
        type: string
      ecs_task_definition_name:
        required: true
        type: string
      ecs_container_name:
        required: true
        type: string
      ecs_service_name:
        required: true
        type: string
      ecs_cluster_name:
        required: true
        type: string
        default: lti-tools

permissions:
  id-token: write   # This is required by AWS for requesting the JWT
  contents: read    # This is required by AWS for actions/checkout

jobs:
  dev-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_DEV_ROLE }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push docker image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY_NAME }}
          BRANCH: ${{ github.ref_name }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$BRANCH -t $REGISTRY/$REPOSITORY:latest .
          docker push $REGISTRY/$REPOSITORY:$BRANCH
          docker push $REGISTRY/$REPOSITORY:latest
          echo "image=$REGISTRY/$REPOSITORY:$BRANCH" >> $GITHUB_OUTPUT

      - name: Download task definition
        env:
          TASK_DEF: ${{ env.ECS_TASK_DEFINITION_NAME }}
        run: aws ecs describe-task-definition --task-definition $TASK_DEF --query taskDefinition > task-definition.json
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
